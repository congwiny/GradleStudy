import groovy.xml.MarkupBuilder

// Top-level build file where you can add configuration options common to all sub-projects/modules.

//file()也是Project提供的一个方法，从当前工程下寻找指定名字的文件
//apply from: this.file('common.gradle')

buildscript { ScriptHandler handler ->

    //配置工程的仓库地址
    handler.repositories { RepositoryHandler repositoryHandler ->
        repositoryHandler.google()
        repositoryHandler.jcenter()

        //私有的maven仓库
        repositoryHandler.maven {
            name 'congwiny'
            url 'http://xxxx.com/nexus/repositories'
            //配置用户名密码
            credentials {
                username = 'admin'
                password = 'admin123'
            }
        }
    }

    //配置工程的"插件"依赖地址 （写gradle程序的依赖库）
    handler.dependencies {
        //可指定 android, library
        classpath 'com.android.tools.build:gradle:3.1.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins { id 'cz.malohlava' version '1.0.3' }


visteg {
    enabled = true
    colouredNodes = true
    colouredEdges = true
    destination = 'build/reports/visteg.dot'
    exporter = 'dot'
    colorscheme = 'spectral11'
    nodeShape = 'box'
    startNodeShape = 'hexagon'
    endNodeShape = 'doubleoctagon'
}


allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println '初始化阶段执行完毕...'
}

/**
 * 配置阶段完成以后的回调
 */
this.afterEvaluate {
    println '配置阶段执行完毕...'
}

/**
 * gradle执行完毕后的回调
 */
this.gradle.buildFinished {
    println '执行阶段执行完毕...'
}

//this.gradle.addListener()

//获取到当前项目的所有Project
//this.getAllprojects()


this.getProjects()

def getProjects() {
    println '-----------------'
    println 'Root Project'
    println '-----------------'
    this.getAllprojects().eachWithIndex { Project project, int index ->
        if (index == 0) {
            println "Root Project ':${project.name}'"
        } else {
            println "+--- project ':${project.name}'"
        }

    }
}
/**
 * -----------------
 * Root Project
 * -----------------
 * Root Project ':GradleStudy'
 * +--- project ':app'
 */

this.getSubProjs()

def getSubProjs() {
    this.getSubprojects().eachWithIndex { Project project, int index ->
        println "Gradle study sub project ':${project.name}'"
    }
}
/**
 * Gradle study sub project ':app'
 */

//--------------------
/**
 * 在父Project管理配置子Project
 */

//找到app这个子Project
project('app') { Project project ->
    //project ->app
    //println "project ->"+project.name

    //指定输出
    apply plugin: 'com.android.application'
    //指定group
    group 'com.cw'
    //指定版本号
    version '1.0'

    //指定依赖
    dependencies {

    }

    //指定Android模块
    android {

    }
}

//配置当前节点工程和其subproject的所有project
allprojects {
    //指定group
    group 'com.cw'
    //指定版本号
    version '1.0'
}
//test project group is com.cw
//println "test project group is " + project('test').group

//不包括当前节点工程，只包括它的subproject
subprojects { project ->
    //子工程如果是library，就上传到maven仓库
    if (project.plugins.hasPlugin('com.android.library')) {
        apply from: '../publishToMaven.gradle'
    }
}

/**
 * 根Project定义的扩展属性，可被子Project继承
 */
ext {
    compileSdkV = 27
    appcompatv7 = 'com.android.support:appcompat-v7:27.1.1'
}

//获取当前项目根工程文件路径
println "the root file path is: " + getRootDir().absolutePath
//the root file path is: /Users/congwiny/Develop/Android/StudioProjects/GradleStudy

//获取当前工程下build文件路径
println "the build file path is: " + getBuildDir().absolutePath
//the build file path is: /Users/congwiny/Develop/Android/StudioProjects/GradleStudy/build

//获取当前工程的文件路径
println "the project file path is: " + getProjectDir().absolutePath
//the project file path is: /Users/congwiny/Develop/Android/StudioProjects/GradleStudy

/**
 * 文件定位
 * @param path 文件的路径
 * @return
 */
def getFileContent(String path) {
    try {
        //file()方法好处是无需传绝对路径，路径会被此方法转换为相对于当前project的相对路径
        def file = file(path)//相对于当前的project开始查找
        return file.text
    } catch (GradleException e) {
        println 'file not found...'
    }
    return null
}

println getFileContent('common.gradle')


task taskA {
    doLast {
        println 'taskA'
    }
}

task taskB {
    doLast {
        println 'taskB'
    }
}

//依赖一个task
task taskC(dependsOn: taskA) {
    doLast {
        println 'taskC'
    }
}

//依赖多个task，所依赖的task的执行顺序是随机的
task taskD(dependsOn: [taskA, taskB]) {
    doLast {
        println 'taskD'
    }
}

//调用task的依赖方法(推荐使用上面的依赖方法，比较简洁)
task taskE {
    doLast {
        println 'taskE'
    }
}
//taskA, taskB, taskC执行顺序是随机的
taskE.dependsOn(taskA, taskB, taskC)

//为task动态的添加依赖
task lib1 << { // "<<" 这个符号表示最追加符，等同于doLast
    println 'lib1'
}

task lib2 << {
    println 'lib2'
}

task noLib << {
    println 'noLib'
}

//taskF要依赖以lib开头的task
task taskF {
    dependsOn this.tasks.findAll { task ->
        return task.name.startsWith('lib')
    }
    doLast {
        println 'taskF'
    }
}

//task的输入输出
ext {
    versonName = '1.0.4'
    versionCode = '104'
    versionInfo = 'App的第4个版本'
    destFile = file('releases.xml')
    if (!destFile.exists()) {
        destFile.createNewFile()
    }
}

//将上面定义的属性，传给task
task writeTask {
    //为task指定输入
    inputs.property('versionName', this.versionCode)
    inputs.property('versionCode', this.versionCode)
    inputs.property('versionInfo', this.versionInfo)
    //destFile做为writeTask指定输出，会先被执行
    outputs.file this.destFile

    doLast {
        println 'writeTask execute...'
        def data = inputs.getProperties()
        File file = outputs.getFiles().getSingleFile()
        //将map转换为实体对象
        def versionMsg = new VersionMsg(data)
        def sw = new StringWriter()
        def xmlBuilder = new MarkupBuilder(sw)
        if (file.text != null && file.text.size() <= 0) {
            xmlBuilder.releases {
                release {
                    versionCode(versionMsg.versionCode)
                    versionName(versionMsg.versionName)
                    versionInfo(versionMsg.versionInfo)
                }
            }
            file.withWriter { writer ->
                writer.append(sw.toString())
            }
        } else {
            //xml已有版本信息
            xmlBuilder.release {
                versionCode(versionMsg.versionCode)
                versionName(versionMsg.versionName)
                versionInfo(versionMsg.versionInfo)
            }

            def lines = file.readLines()

            //将生成的xml数据插入到根节点之前
            def lengths = lines.size() - 1
            file.withWriter { writer ->
                lines.eachWithIndex { String line, int index ->
                    if (index != lengths) {
                        writer.append(line + '\r\n')
                    } else {
                        writer.append('\r\n' + sw.toString() + '\r\n')
                        writer.append(lines.get(lengths))
                    }
                }
            }
        }
    }
}

//读任务
task readTask {
    //destFile做为readTask的输入
    inputs.file this.destFile

    doLast {
        println 'readTask execute...'
        def file = inputs.files.singleFile
        println file.text
    }
}

//destFile作为输入输出文件，把writeTask和readTask关联起来了

task taskTest {
    dependsOn  writeTask,readTask
    doLast {
        println '输入输出任务结束'
    }
}


class VersionMsg {
    String versionCode
    String versionName
    String versionInfo
}

//mustRunAfter 指定Task执行顺序
task taskL {
    doLast {
        println 'TaskL'
    }
}

task taskM {
    mustRunAfter taskL
    doLast {
        println 'TaskM'
    }
}

task taskN {
    mustRunAfter taskM
    doLast {
        println 'TaskN'
    }
}

// ./gradlew taskN taskL taskM