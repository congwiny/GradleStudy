apply plugin: 'com.android.application'

android {
    compileSdkVersion this.compileSdkV
    defaultConfig {
        applicationId "com.congwiny.gradlestudy"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

// app应用程序的依赖库
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compile this.appcompatv7
//    compile(this.appcompatv7) {
//        //排除依赖
//        exclude module: 'support-v4'
//        //把com.android.support包下的都排除
//        exclude group: 'com.android.support'
//        //应该减少对传递依赖的使用
//        transitive false //禁止传递依赖，gradle默认为false
//    }
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //引入属性
    //implementation rootProject.ext.dependence.libOkhttp
}


this.getProjects()

def getProjects() {
    println '-----------------'
    println 'app Root Project'
    println '-----------------'
    this.getAllprojects().eachWithIndex { Project project, int index ->
        if (index == 0) {
            println "app Root Project ':${project.name}'"
        } else {
            println "+--- project ':${project.name}'"
        }

    }
}
/**
 * app Root Project ':app'
 */

def getParentProject() {
    def name = this.getParent().name
    println "the parent project name is ${name}"
}
//the parent project name is GradleStudy
getParentProject()


def getRootProj() {
    this.getRootProject().name
}

//Root Project is GradleStudy
println "Root Project is " + getRootProj()


task apkcopy {
    //gradle的执行阶段去执行
    doLast {
        def srcPath = this.buildDir.path + '/outputs/apk'
        def destPath = '/Users/congwiny/Downloads/'
        def cmd = "mv -f ${srcPath} ${destPath}"
        exec {
            try {
                executable 'bash'
                args '-c', cmd
                println 'the cmd is execute success...'

            } catch (GradleException e) {
                println 'the cmd is execute failed...'
            }
        }
    }
}

//默认在配置阶段执行（执行一个task,下面几个task，除了doFirst/doLast所在的任务，都会在配置阶段执行）
task(ahelloTask {
    println 'I am a hello task'
})


task ahelloTask2 {
    println 'I am a hello task2'
    doFirst {
        println 'ahello task2 doFirst execute.. '
    }
}

//先执行外部的doFirst，后执行内部的doFirst
ahelloTask2.doFirst {
    println 'ahello task doFirst execute.'
}

this.tasks.create(name: 'ahellotask3') {
    println 'I am a hello task3'
}

//Task创建时，同时指定配置：分组和描述
task helloTask(group:'congwiny', description:'task study'){
    println 'I am a hello task with group and description'
}

//Task调用其配置方法进行配置
this.tasks.create(name:'helloTask2'){
    setGroup('congwiny')
    setDescription('task study')
    println 'I am a hello task2 with group and description'
}


//apply plugin: 'com.android.application'
//apply plugin: 'realm-android' //依赖Realm数据库，插件化依赖
//apply from: './tinker.gradle'
//apply plugin: 'com.imooc.gradle.study'
//
//android {
//    compileSdkVersion rootProject.ext.android.compileSdkVersion
//    buildToolsVersion rootProject.ext.android.buildToolsVersion
//
//    defaultConfig {
//        applicationId rootProject.ext.android.applicationId
//        minSdkVersion rootProject.ext.android.minSdkVersion
//        targetSdkVersion rootProject.ext.android.targetSdkVersion
//        versionCode rootProject.ext.android.versionCode
//        versionName rootProject.ext.android.versionName
//        multiDexEnabled rootProject.ext.android.multiDexEnabled //突破应用方法数65535的一个限制
//        manifestPlaceholders = rootProject.ext.android.manifestPlaceholders
//    }
//
//    signingConfigs {
//        //签名打包
//        release {
//            storeFile file(rootProject.ext.signConfigs.storeFile)
//            storePassword rootProject.ext.signConfigs.storePassword
//            keyAlias rootProject.ext.signConfigs.keyAlias
//            keyPassword rootProject.ext.signConfigs.keyPassword
//        }
//    }
//
//    buildTypes {
//        release {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//        }
//    }
//
//    lintOptions {
//        abortOnError false
//        lintConfig file("lint.xml")
//    }
//
//    //recommend
//    dexOptions {
//        jumboMode = true
//    }
//
//    compileOptions {
//        sourceCompatibility rootProject.ext.java.javaVersion
//        targetCompatibility rootProject.ext.java.javaVersion
//    }
//
//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['libs'] //修改so库存放位置
//
//            res.srcDirs = ['src/main/res',
//                           'src/main/res-ad',
//                           'src/main/res-player']
//        }
//    }
//
//    productFlavors {
//        baidu {}
//        google {}
//    }
//}
//
////为应用程序添加第三方库依赖
//dependencies {
//    compile fileTree(include: ['*.jar'], dir: 'libs')
//    compile rootProject.ext.dependence.libSupportV7
//    compile rootProject.ext.dependence.libSupportMultidex
//    //依赖library工程
//    compile project(rootProject.ext.dependence.libCommonLibrary)
//    compile project(rootProject.ext.dependence.libPullAlive)
//    compile rootProject.ext.dependence.libCircleImageView
//    compile rootProject.ext.dependence.libSystembarTint
//    //添加友盟统计
//    compile rootProject.ext.dependence.libUmengAnalytics
//    compile rootProject.ext.dependence.libUniversalImageLoader
//    compile rootProject.ext.dependence.libOkhttp
//    //okttp依赖
//    //compile 'com.github.chrisbanes:PhotoView:1.3.0'
//    compile(rootProject.ext.dependence.libAutoScrollViewPager) {
//        exclude module: 'support-v4' //排除依赖
//        transitive false //禁止传递依赖
//    }
//    compile rootProject.ext.dependence.libSlidableActivity
//    //滑动关闭Activity库
//    compile rootProject.ext.dependence.libAndfix
//    //阿里热修复andfix
//    compile rootProject.ext.dependence.libLogger
//    //日志库logger
//    //Tinker相关依赖
//    compile(rootProject.ext.dependence.libTinker) {
//        changing = true //每次都从服务端拉取
//    }
//    provided(rootProject.ext.dependence.libTinkerAndroid) { changing = true }
//}
//
//repositories {
//    flatDir {
//        dirs 'libs'
//    }
//}
//
///**
// * 为自定义插件传递参数
// */
//imoocReleaseInfo {
//    versionCode = rootProject.ext.android.versionCode
//    versionName = rootProject.ext.android.versionName
//    versionInfo = '第8个版本。。。'
//    fileName = 'releases.xml'
//}
//
//this.afterEvaluate {
//    this.android.applicationVariants.all { variant ->
////        def output = variant.outputs.first()
////        def apkName = "app-${variant.baseName}" +
////                "-${variant.versionName}.apk"
////        output.outputFile = new File(output.outputFile.parent,
////                apkName)
////        println output.outputFile.name
//
//        def task = variant.checkManifest
//        println task.name
//    }
//}

//既可以拷贝文件，也可拷贝文件夹
//copy{
//    from file('proguard-rules.pro')
//    into getRootProject().getBuildDir()
//    //可通过exclude闭包，去掉不想拷贝的文件
//    exclude{}
//    //可以通过rename闭包，对拷贝的文件重命名
//    rename {}
//}

//对文件树进行遍历(对文件夹遍历)
fileTree('build/outputs/apk/') { FileTree fileTree ->
    fileTree.visit { FileTreeElement element ->
        println 'the file name is:' + element.file.name
        copy {
            from element.file
            into getRootProject().getBuildDir().path + '/test/'
        }
    }
}
